# main.py
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, CallbackQuery
import asyncio
import os
from steps import steps
from utils import format_duration

API_TOKEN = os.getenv("TOKEN")
CHANNEL_USERNAME = "@sunxstyle"

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
user_states = {}

# –ö–Ω–æ–ø–∫–∏
def generate_steps_kb():
    kb = ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
    for step in steps:
        duration = sum(x[1] for x in step['positions'])
        label = f"–®–∞–≥ {step['step']} ({format_duration(duration)})"
        kb.insert(KeyboardButton(label))
    kb.add(KeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ"))
    return kb

control_kb = ReplyKeyboardMarkup(resize_keyboard=True)
control_kb.add(
    KeyboardButton("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"),
    KeyboardButton("‚õî –ó–∞–≤–µ—Ä—à–∏—Ç—å"),
    KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –Ω–∞ 2 —à–∞–≥–∞"),
    KeyboardButton("üìã –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —à–∞–≥–∞–º")
)

done_kb = ReplyKeyboardMarkup(resize_keyboard=True)
done_kb.add(
    KeyboardButton("‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"),
    KeyboardButton("üìã –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —à–∞–≥–∞–º"),
    KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –Ω–∞ 2 —à–∞–≥–∞"),
    KeyboardButton("‚õî –ó–∞–≤–µ—Ä—à–∏—Ç—å")
)

@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç, —Å–æ–ª–Ω—Ü–µ! ‚òÄÔ∏è\n–¢—ã –≤ —Ç–∞–π–º–µ—Ä–µ –ø–æ –º–µ—Ç–æ–¥—É —Å—É–ø–µ—Ä–∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏.\n–ù–∞—á–Ω–∏ —Å —à–∞–≥–∞ 1.",
        reply_markup=generate_steps_kb()
    )

@dp.message_handler(lambda m: m.text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ")
async def info_handler(message: types.Message):
    await message.answer(
        "–ú–µ—Ç–æ–¥ —Å—É–ø–µ—Ä–∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ ‚Äî –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø—É—Ç—å –∫ –∑–∞–≥–∞—Ä—É –±–µ–∑ –æ–∂–æ–≥–æ–≤.\n"
        "–ó–∞–≥–æ—Ä–∞–π —É—Ç—Ä–æ–º –¥–æ 11 –∏ –≤–µ—á–µ—Ä–æ–º –ø–æ—Å–ª–µ 17 –±–µ–∑ SPF, –≤ –æ—Å—Ç–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è ‚Äî –ø–æ–¥ –∑–∞—â–∏—Ç–æ–π."
    )

@dp.message_handler(lambda m: m.text.startswith("–®–∞–≥ "))
async def step_handler(message: types.Message):
    try:
        step_number = int(message.text.split()[1])
        step = next(s for s in steps if s['step'] == step_number)
        user_states[message.from_user.id] = {"step": step_number, "positions": step["positions"], "index": 0}
        await run_step(message)
    except:
        await message.answer("–ù–µ –º–æ–≥—É –Ω–∞—á–∞—Ç—å —à–∞–≥")

async def run_step(message):
    state = user_states.get(message.from_user.id)
    if not state:
        return
    index = state["index"]
    if index >= len(state["positions"]):
        await message.answer("–®–∞–≥ –∑–∞–≤–µ—Ä—à—ë–Ω ‚òÄÔ∏è", reply_markup=done_kb)
        return
    pos, dur = state["positions"][index]
    await message.answer(f"{pos} ‚Äî {format_duration(dur)}", reply_markup=control_kb)
    await asyncio.sleep(int(dur * 60))
    state["index"] += 1
    await run_step(message)

@dp.message_handler(lambda m: m.text == "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
async def skip_position(message: types.Message):
    if message.from_user.id in user_states:
        user_states[message.from_user.id]["index"] += 1
        await run_step(message)

@dp.message_handler(lambda m: m.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥ –Ω–∞ 2 —à–∞–≥–∞")
async def back_two_steps(message: types.Message):
    current = user_states.get(message.from_user.id)
    if not current:
        return await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —à–∞–≥")
    new_step = max(1, current["step"] - 2)
    await step_handler(types.Message(
        message_id=message.message_id,
        date=message.date,
        chat=message.chat,
        text=f"–®–∞–≥ {new_step}",
        from_user=message.from_user
    ))

@dp.message_handler(lambda m: m.text == "üìã –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —à–∞–≥–∞–º")
async def back_to_menu(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏ —à–∞–≥", reply_markup=generate_steps_kb())

@dp.message_handler(lambda m: m.text == "‚õî –ó–∞–≤–µ—Ä—à–∏—Ç—å")
async def end_session(message: types.Message):
    user_states.pop(message.from_user.id, None)
    await message.answer("–°–µ–∞–Ω—Å –∑–∞–≤–µ—Ä—à—ë–Ω. –ú–æ–∂–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –ø–æ–∑–∂–µ –∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ ‚òÄÔ∏è", reply_markup=generate_steps_kb())

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
