# coding: utf-8

from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
import asyncio
import os
import logging
from steps import steps

API_TOKEN = os.getenv("TOKEN")
CHANNEL_USERNAME = "@sunxstyle"

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
logging.basicConfig(level=logging.INFO)

user_states = {}

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

def format_time(mins):
    mins = float(mins)
    whole = int(mins)
    sec = int((mins - whole) * 60)
    if whole and sec:
        return f"{whole} –º–∏–Ω {sec} —Å–µ–∫"
    elif whole:
        return f"{whole} –º–∏–Ω"
    else:
        return f"{sec} —Å–µ–∫"

def get_step_duration(step):
    total = sum([p['duration_min'] for p in step['positions']])
    h = int(total) // 60
    m = int(total) % 60
    if h and m:
        return f"{h} —á {m} –º–∏–Ω"
    elif h:
        return f"{h} —á"
    else:
        return f"{m} –º–∏–Ω"

def steps_keyboard():
    kb = ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
    buttons = [
        KeyboardButton(f"–®–∞–≥ {s['step']} ‚Äî {get_step_duration(s)}") for s in steps
    ]
    kb.add(*buttons)
    kb.add(KeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ"))
    return kb

def control_keyboard():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"))
    kb.add(KeyboardButton("‚õî –ó–∞–≤–µ—Ä—à–∏—Ç—å"))
    kb.add(KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –Ω–∞ 2 —à–∞–≥–∞ (–µ—Å–ª–∏ –±—ã–ª –ø–µ—Ä–µ—Ä—ã–≤)"))
    kb.add(KeyboardButton("üìã –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —à–∞–≥–∞–º"))
    return kb

def final_keyboard():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row(
        KeyboardButton("‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"),
        KeyboardButton("üìã –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —à–∞–≥–∞–º"),
        KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –Ω–∞ 2 —à–∞–≥–∞ (–µ—Å–ª–∏ –±—ã–ª –ø–µ—Ä–µ—Ä—ã–≤)"),
        KeyboardButton("‚õî –ó–∞–≤–µ—Ä—à–∏—Ç—å")
    )
    return kb

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
async def is_subscribed(user_id):
    try:
        member = await bot.get_chat_member(chat_id=CHANNEL_USERNAME, user_id=user_id)
        return member.status in ["member", "administrator", "creator"]
    except:
        return False

def check_sub_keyboard():
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–Ω(–∞)", callback_data="check_sub"))
    return kb

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
WELCOME = (
    "–ü—Ä–∏–≤–µ—Ç, —Å–æ–ª–Ω—Ü–µ! ‚òÄÔ∏è\n"
    "–¢—ã –≤ —Ç–∞–π–º–µ—Ä–µ –ø–æ –º–µ—Ç–æ–¥—É —Å—É–ø–µ—Ä–∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏.\n"
    "–ö–æ–∂–∞ –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è –∫ —Å–æ–ª–Ω—Ü—É –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ ‚Äî –∏ –∑–∞–≥–∞—Ä —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Ä–æ–≤–Ω—ã–º, –≥–ª—É–±–æ–∫–∏–º –∏ –±–µ–∑ –æ–∂–æ–≥–æ–≤.\n\n"
    "–ù–∞—á–∏–Ω–∞–π —Å —à–∞–≥–∞ 1. –î–∞–∂–µ –µ—Å–ª–∏ —É–∂–µ –Ω–µ–º–Ω–æ–≥–æ –∑–∞–≥–æ—Ä–µ–ª(–∞), –≤–∞–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –ø—É—Ç—å —Å –Ω–∞—á–∞–ª–∞.\n"
    "–ö–∞–∂–¥—ã–π –Ω–æ–≤—ã–π –¥–µ–Ω—å –∏ –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ä—ã–≤–∞ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –Ω–∞ 2 —à–∞–≥–∞ –Ω–∞–∑–∞–¥.\n\n"
    "–•–æ—á–µ—à—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –ø–æ–¥—Ä–æ–±–Ω–µ–µ ‚Äî –∂–º–∏ /info. –¢–∞–º –≤—Å—ë –ø–æ –¥–µ–ª—É."
)

INFO = (
    "‚ÑπÔ∏è –ú–µ—Ç–æ–¥ —Å—É–ø–µ—Ä–∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ ‚Äî —ç—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π, –ø–æ—à–∞–≥–æ–≤—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –∑–∞–≥–∞—Ä—É.\n"
    "–û–Ω –ø–æ–º–æ–≥–∞–µ—Ç –∫–æ–∂–µ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫ —Å–æ–ª–Ω—Ü—É, —Å–Ω–∏–∂–∞—è —Ä–∏—Å–∫ –æ–∂–æ–≥–æ–≤ –∏ –ø—è—Ç–µ–Ω.\n\n"
    "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∑–∞–≥–æ—Ä–∞—Ç—å —Å 7:00 –¥–æ 11:00 –∏ –ø–æ—Å–ª–µ 17:00 ‚Äî –≤ —ç—Ç–æ –≤—Ä–µ–º—è —Å–æ–ª–Ω—Ü–µ –º—è–≥–∫–æ–µ,\n"
    "–∏ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏–π –º–æ–∂–Ω–æ –∑–∞–≥–æ—Ä–∞—Ç—å –±–µ–∑ SPF.\n"
    "–¢–∞–∫ –∫–æ–∂–∞ –≤–∫–ª—é—á–∞–µ—Ç —Å–≤–æ—é –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—É—é –∑–∞—â–∏—Ç—É: –≤—ã—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –º–µ–ª–∞–Ω–∏–Ω –∏ –≥–æ—Ä–º–æ–Ω—ã –∞–¥–∞–ø—Ç–∞—Ü–∏–∏.\n\n"
    "–° 11:00 –¥–æ 17:00 ‚Äî —Å–æ–ª–Ω—Ü–µ –±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ. –ï—Å–ª–∏ –æ—Å—Ç–∞—ë—à—å—Å—è –Ω–∞ —É–ª–∏—Ü–µ ‚Äî\n"
    "–Ω–∞–¥–µ–≤–∞–π –æ–¥–µ–∂–¥—É, –≥–æ–ª–æ–≤–Ω–æ–π —É–±–æ—Ä –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π SPF.\n\n"
    "–ö–∞–∂–¥—ã–π –Ω–æ–≤—ã–π –¥–µ–Ω—å –∏ –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ä—ã–≤–∞ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –Ω–∞ 2 —à–∞–≥–∞ –Ω–∞–∑–∞–¥.\n"
    "–≠—Ç–æ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –∫–æ–∂–∞ –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞–ª–∞—Å—å –∏ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —É—Å–∏–ª–∏–≤–∞–ª–∞ –∑–∞—â–∏—Ç—É.\n\n"
    "–ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã ‚Äî –ø–∏—à–∏: @sunxbeach_director"
)

# –ö–æ–º–∞–Ω–¥—ã
@dp.message_handler(commands=["start"])
async def start_cmd(msg: types.Message):
    if await is_subscribed(msg.from_user.id):
        await msg.answer(WELCOME, reply_markup=steps_keyboard())
    else:
        await msg.answer("–ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –Ω—É–∂–Ω–æ –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω(–∞) –Ω–∞ –∫–∞–Ω–∞–ª @sunxstyle.",
                         reply_markup=check_sub_keyboard())

@dp.callback_query_handler(lambda c: c.data == "check_sub")
async def verify_sub(callback: types.CallbackQuery):
    if await is_subscribed(callback.from_user.id):
        await bot.send_message(callback.from_user.id, WELCOME, reply_markup=steps_keyboard())
    else:
        await callback.answer("–ü–æ–∫–∞ –Ω–µ –≤–∏–∂—É –ø–æ–¥–ø–∏—Å–∫–∏...")

@dp.message_handler(commands=["info"])
async def info_cmd(msg: types.Message):
    await msg.answer(INFO)

@dp.message_handler(lambda m: m.text.startswith("–®–∞–≥ "))
async def handle_step(msg: types.Message):
    try:
        step_num = int(msg.text.split()[1])
        step_data = next((s for s in steps if s["step"] == step_num), None)
        if not step_data:
            return await msg.answer("–®–∞–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        user_states[msg.from_user.id] = {"step": step_num, "pos": 0, "active": True}
        pos = step_data["positions"][0]
        await msg.answer(f"{pos['name']} ‚Äî {format_time(pos['duration_min'])}", reply_markup=control_keyboard())
        await start_timer(msg.chat.id, msg.from_user.id)
    except:
        await msg.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫")

@dp.message_handler(lambda m: m.text in ["‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "‚õî –ó–∞–≤–µ—Ä—à–∏—Ç—å", "‚Ü©Ô∏è –ù–∞–∑–∞–¥ –Ω–∞ 2 —à–∞–≥–∞ (–µ—Å–ª–∏ –±—ã–ª –ø–µ—Ä–µ—Ä—ã–≤)", "üìã –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —à–∞–≥–∞–º"])
async def handle_controls(msg: types.Message):
    user = user_states.get(msg.from_user.id)
    if not user:
        return await msg.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —à–∞–≥.")
    if msg.text == "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        user["pos"] += 1
        await continue_step(msg.chat.id, msg.from_user.id)
    elif msg.text == "‚õî –ó–∞–≤–µ—Ä—à–∏—Ç—å":
        await msg.answer("–°–µ–∞–Ω—Å –∑–∞–≤–µ—Ä—à—ë–Ω. –ú–æ–∂–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –ø–æ–∑–∂–µ –∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ ‚òÄÔ∏è", reply_markup=steps_keyboard())
        user_states.pop(msg.from_user.id, None)
    elif msg.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥ –Ω–∞ 2 —à–∞–≥–∞ (–µ—Å–ª–∏ –±—ã–ª –ø–µ—Ä–µ—Ä—ã–≤)":
        user["step"] = max(1, user["step"] - 2)
        user["pos"] = 0
        await continue_step(msg.chat.id, msg.from_user.id)
    elif msg.text == "üìã –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —à–∞–≥–∞–º":
        user_states.pop(msg.from_user.id, None)
        await msg.answer("–í—ã–±–µ—Ä–∏ —à–∞–≥:", reply_markup=steps_keyboard())

async def start_timer(chat_id, user_id):
    user = user_states.get(user_id)
    if not user:
        return
    step_data = next((s for s in steps if s["step"] == user["step"]), None)
    if not step_data:
        return
    try:
        duration = step_data["positions"][user["pos"]]["duration_min"] * 60
    except IndexError:
        return
    await asyncio.sleep(duration)
    user["pos"] += 1
    await continue_step(chat_id, user_id)

async def continue_step(chat_id, user_id):
    user = user_states.get(user_id)
    step_data = next((s for s in steps if s["step"] == user["step"]), None)
    if user["pos"] >= len(step_data["positions"]):
        if user["step"] == 12:
            await bot.send_message(chat_id, "–¢—ã –∑–∞–≤–µ—Ä—à–∏–ª(–∞) –≤—Å–µ 12 —à–∞–≥–æ–≤ –ø–æ –º–µ—Ç–æ–¥—É —Å—É–ø–µ—Ä–∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏!
–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ—Ä—ã–≤ ‚Äî –∏–ª–∏ –ø—Ä–æ–π—Ç–∏ —Ü–∏–∫–ª –∑–∞–Ω–æ–≤–æ ‚òÄÔ∏è", reply_markup=final_keyboard())
        else:
            await bot.send_message(chat_id, "–®–∞–≥ –∑–∞–≤–µ—Ä—à—ë–Ω!", reply_markup=final_keyboard())
        user_states.pop(user_id, None)
        return
    pos = step_data["positions"][user["pos"]]
    await bot.send_message(chat_id, f"{pos['name']} ‚Äî {format_time(pos['duration_min'])}")
    await start_timer(chat_id, user_id)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
